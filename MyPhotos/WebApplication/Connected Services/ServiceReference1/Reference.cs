//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IAPI")]
    public interface IAPI
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceAPI/AddTables", ReplyAction="http://tempuri.org/InterfaceAPI/AddTablesResponse")]
        System.Threading.Tasks.Task AddTablesAsync(string table, string path, string name, string zone, string person, string eventt, string automobile, string otherTags);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceAPI/SearchElementByName", ReplyAction="http://tempuri.org/InterfaceAPI/SearchElementByNameResponse")]
        System.Threading.Tasks.Task<string> SearchElementByNameAsync(string table, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceAPI/SearchElementByZone", ReplyAction="http://tempuri.org/InterfaceAPI/SearchElementByZoneResponse")]
        System.Threading.Tasks.Task<string> SearchElementByZoneAsync(string table, string zone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceAPI/SearchElementByPerson", ReplyAction="http://tempuri.org/InterfaceAPI/SearchElementByPersonResponse")]
        System.Threading.Tasks.Task<string> SearchElementByPersonAsync(string table, string person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceAPI/SearchElementByEvent", ReplyAction="http://tempuri.org/InterfaceAPI/SearchElementByEventResponse")]
        System.Threading.Tasks.Task<string> SearchElementByEventAsync(string table, string eventt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceAPI/SearchElementByAutomobile", ReplyAction="http://tempuri.org/InterfaceAPI/SearchElementByAutomobileResponse")]
        System.Threading.Tasks.Task<string> SearchElementByAutomobileAsync(string table, string automobile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceAPI/SearchElementByOtherTags", ReplyAction="http://tempuri.org/InterfaceAPI/SearchElementByOtherTagsResponse")]
        System.Threading.Tasks.Task<string> SearchElementByOtherTagsAsync(string table, string other_tags);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceAPI/ModifyElementName", ReplyAction="http://tempuri.org/InterfaceAPI/ModifyElementNameResponse")]
        System.Threading.Tasks.Task ModifyElementNameAsync(string table, string name, string newName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceAPI/ReadTable", ReplyAction="http://tempuri.org/InterfaceAPI/ReadTableResponse")]
        System.Threading.Tasks.Task<string> ReadTableAsync(string table);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceAPI/ReturnIdOfElement", ReplyAction="http://tempuri.org/InterfaceAPI/ReturnIdOfElementResponse")]
        System.Threading.Tasks.Task<int> ReturnIdOfElementAsync(string path);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IAPIChannel : ServiceReference1.IAPI, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class APIClient : System.ServiceModel.ClientBase<ServiceReference1.IAPI>, ServiceReference1.IAPI
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public APIClient() : 
                base(APIClient.GetDefaultBinding(), APIClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IAPI.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public APIClient(EndpointConfiguration endpointConfiguration) : 
                base(APIClient.GetBindingForEndpoint(endpointConfiguration), APIClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public APIClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(APIClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public APIClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(APIClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public APIClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task AddTablesAsync(string table, string path, string name, string zone, string person, string eventt, string automobile, string otherTags)
        {
            return base.Channel.AddTablesAsync(table, path, name, zone, person, eventt, automobile, otherTags);
        }
        
        public System.Threading.Tasks.Task<string> SearchElementByNameAsync(string table, string name)
        {
            return base.Channel.SearchElementByNameAsync(table, name);
        }
        
        public System.Threading.Tasks.Task<string> SearchElementByZoneAsync(string table, string zone)
        {
            return base.Channel.SearchElementByZoneAsync(table, zone);
        }
        
        public System.Threading.Tasks.Task<string> SearchElementByPersonAsync(string table, string person)
        {
            return base.Channel.SearchElementByPersonAsync(table, person);
        }
        
        public System.Threading.Tasks.Task<string> SearchElementByEventAsync(string table, string eventt)
        {
            return base.Channel.SearchElementByEventAsync(table, eventt);
        }
        
        public System.Threading.Tasks.Task<string> SearchElementByAutomobileAsync(string table, string automobile)
        {
            return base.Channel.SearchElementByAutomobileAsync(table, automobile);
        }
        
        public System.Threading.Tasks.Task<string> SearchElementByOtherTagsAsync(string table, string other_tags)
        {
            return base.Channel.SearchElementByOtherTagsAsync(table, other_tags);
        }
        
        public System.Threading.Tasks.Task ModifyElementNameAsync(string table, string name, string newName)
        {
            return base.Channel.ModifyElementNameAsync(table, name, newName);
        }
        
        public System.Threading.Tasks.Task<string> ReadTableAsync(string table)
        {
            return base.Channel.ReadTableAsync(table);
        }
        
        public System.Threading.Tasks.Task<int> ReturnIdOfElementAsync(string path)
        {
            return base.Channel.ReturnIdOfElementAsync(path);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAPI))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAPI))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8000/PC");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return APIClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IAPI);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return APIClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IAPI);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IAPI,
        }
    }
}
